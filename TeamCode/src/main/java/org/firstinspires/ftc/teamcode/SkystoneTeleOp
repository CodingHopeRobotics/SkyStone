package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

@TeleOp(name="SkystoneTeleOp", group="Linear Opmode")
@Disabled
public class SkystoneTeleOp extends LinearOpMode {

    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor leftDrive = null;
    private DcMotor rightDrive = null;

@Override
    public void runOpMode() {
        telemetry.addData("Status", "Initialized");
        telemetry.update();

        leftDrive  = hardwareMap.get(DcMotor.class, "left_drive");
        rightDrive = hardwareMap.get(DcMotor.class, "right_drive");

        leftDrive.setDirection(DcMotor.Direction.FORWARD);
        rightDrive.setDirection(DcMotor.Direction.REVERSE);

        waitForStart();
        runtime.reset();

        while (opModeIsActive()) {

            double leftPower; //Create variable for power of left drive motor
            double rightPower;  //Create variable for power of right drive motor

            double drive = -gamepad1.left_stick_y;  //use the left stick to power drive motors
            double turn  =  gamepad1.right_stick_x;  //use right stick to controller drive turning
            leftPower    = Range.clip(drive + turn, -1.0, 1.0) ; //calculate the power given for left drive motor
            rightPower   = Range.clip(drive - turn, -1.0, 1.0) ;  //calculate the power given for right drive motor

            leftDrive.setPower(leftPower);
            rightDrive.setPower(rightPower);

telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("Motors", "left (%.2f), right (%.2f)", leftPower, rightPower);
            telemetry.update();
        }
    }
}
